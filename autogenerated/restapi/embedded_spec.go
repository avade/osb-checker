// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "The Open Service Broker API defines an HTTP(S) interface between Platforms and Service Brokers.",
    "title": "Open Service Broker API",
    "contact": {
      "name": "Open Service Broker API",
      "url": "https://www.openservicebrokerapi.org/",
      "email": "open-service-broker-api@googlegroups.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "master - might contain changes that are not yet released"
  },
  "host": "localhost:3000",
  "paths": {
    "/v2/catalog": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Catalog"
        ],
        "summary": "get the catalog of services that the service broker offers",
        "operationId": "catalog.get",
        "responses": {
          "200": {
            "description": "catalog response",
            "schema": {
              "$ref": "#/definitions/Catalog"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/APIVersion"
        },
        {
          "$ref": "#/parameters/OriginatingIdentity"
        },
        {
          "$ref": "#/parameters/RequestIdentity"
        }
      ]
    },
    "/v2/service_instances/{instance_id}": {
      "get": {
        "tags": [
          "ServiceInstances"
        ],
        "summary": "gets a service instance",
        "operationId": "serviceInstance.get",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ServiceInstanceResource"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "ServiceInstances"
        ],
        "summary": "provision a service instance",
        "operationId": "serviceInstance.provision",
        "parameters": [
          {
            "description": "parameters for the requested service instance provision",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServiceInstanceProvisionRequest"
            }
          },
          {
            "$ref": "#/parameters/accepts_incomplete"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ServiceInstanceProvision"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ServiceInstanceProvision"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/ServiceInstanceAsyncOperation"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "ServiceInstances"
        ],
        "summary": "deprovision a service instance",
        "operationId": "serviceInstance.deprovision",
        "parameters": [
          {
            "$ref": "#/parameters/accepts_incomplete"
          },
          {
            "$ref": "#/parameters/service_id"
          },
          {
            "$ref": "#/parameters/plan_id"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/AsyncOperation"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "ServiceInstances"
        ],
        "summary": "update a service instance",
        "operationId": "serviceInstance.update",
        "parameters": [
          {
            "description": "parameters for the requested service instance update",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServiceInstanceUpdateRequest"
            }
          },
          {
            "$ref": "#/parameters/accepts_incomplete"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/ServiceInstanceAsyncOperation"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/APIVersion"
        },
        {
          "$ref": "#/parameters/OriginatingIdentity"
        },
        {
          "$ref": "#/parameters/RequestIdentity"
        },
        {
          "$ref": "#/parameters/instance_id"
        }
      ]
    },
    "/v2/service_instances/{instance_id}/last_operation": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "ServiceInstances"
        ],
        "summary": "last requested operation state for service instance",
        "operationId": "serviceInstance.lastOperation.get",
        "parameters": [
          {
            "type": "string",
            "description": "id of the service associated with the instance",
            "name": "service_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "id of the plan associated with the instance",
            "name": "plan_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "a provided identifier for the operation",
            "name": "operation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LastOperationResource"
            },
            "headers": {
              "RetryAfter": {
                "type": "string",
                "description": "Indicates when to retry the request"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/APIVersion"
        },
        {
          "$ref": "#/parameters/OriginatingIdentity"
        },
        {
          "$ref": "#/parameters/RequestIdentity"
        },
        {
          "$ref": "#/parameters/instance_id"
        }
      ]
    },
    "/v2/service_instances/{instance_id}/service_bindings/{binding_id}": {
      "get": {
        "tags": [
          "ServiceBindings"
        ],
        "summary": "gets a service binding",
        "operationId": "serviceBinding.get",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ServiceBindingResource"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "ServiceBindings"
        ],
        "summary": "generation of a service binding",
        "operationId": "serviceBinding.binding",
        "parameters": [
          {
            "description": "parameters for the requested service binding",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServiceBindingRequest"
            }
          },
          {
            "$ref": "#/parameters/accepts_incomplete"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ServiceBinding"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ServiceBinding"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/AsyncOperation"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ServiceBindings"
        ],
        "summary": "deprovision of a service binding",
        "operationId": "serviceBinding.unbinding",
        "parameters": [
          {
            "$ref": "#/parameters/service_id"
          },
          {
            "$ref": "#/parameters/plan_id"
          },
          {
            "$ref": "#/parameters/accepts_incomplete"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/AsyncOperation"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/APIVersion"
        },
        {
          "$ref": "#/parameters/OriginatingIdentity"
        },
        {
          "$ref": "#/parameters/RequestIdentity"
        },
        {
          "$ref": "#/parameters/instance_id"
        },
        {
          "$ref": "#/parameters/binding_id"
        }
      ]
    },
    "/v2/service_instances/{instance_id}/service_bindings/{binding_id}/last_operation": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "ServiceBindings"
        ],
        "summary": "last requested operation state for service binding",
        "operationId": "serviceBinding.lastOperation.get",
        "parameters": [
          {
            "type": "string",
            "description": "id of the service associated with the instance",
            "name": "service_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "id of the plan associated with the instance",
            "name": "plan_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "a provided identifier for the operation",
            "name": "operation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LastOperationResource"
            },
            "headers": {
              "RetryAfter": {
                "type": "string",
                "description": "Indicates when to retry the request"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/APIVersion"
        },
        {
          "$ref": "#/parameters/OriginatingIdentity"
        },
        {
          "$ref": "#/parameters/RequestIdentity"
        },
        {
          "$ref": "#/parameters/instance_id"
        },
        {
          "$ref": "#/parameters/binding_id"
        }
      ]
    }
  },
  "definitions": {
    "AsyncOperation": {
      "type": "object",
      "properties": {
        "operation": {
          "type": "string"
        }
      }
    },
    "Catalog": {
      "type": "object",
      "properties": {
        "services": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Service"
          }
        }
      }
    },
    "Context": {
      "description": "See [Context Conventions](https://github.com/openservicebrokerapi/servicebroker/blob/master/profile.md#context-object) for more details.",
      "type": "object"
    },
    "DashboardClient": {
      "type": "object",
      "required": [
        "id",
        "secret"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "redirect_uri": {
          "type": "string"
        },
        "secret": {
          "type": "string"
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "error": {
          "type": "string"
        }
      }
    },
    "JSONSchemaObject": {
      "type": "object"
    },
    "LastOperationResource": {
      "type": "object",
      "required": [
        "state"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "state": {
          "type": "string",
          "enum": [
            "in progress",
            "succeeded",
            "failed"
          ]
        }
      }
    },
    "MaintenanceInfo": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        }
      }
    },
    "Metadata": {
      "description": "See [Service Metadata Conventions](https://github.com/openservicebrokerapi/servicebroker/blob/master/profile.md#service-metadata) for more details.",
      "type": "object"
    },
    "Object": {
      "type": "object"
    },
    "Plan": {
      "type": "object",
      "required": [
        "id",
        "name",
        "description"
      ],
      "properties": {
        "bindable": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "free": {
          "type": "boolean",
          "default": true
        },
        "id": {
          "type": "string"
        },
        "maintenance_info": {
          "$ref": "#/definitions/MaintenanceInfo"
        },
        "maximum_polling_duration": {
          "type": "integer"
        },
        "metadata": {
          "$ref": "#/definitions/Metadata"
        },
        "name": {
          "type": "string"
        },
        "plan_updateable": {
          "type": "boolean"
        },
        "schemas": {
          "$ref": "#/definitions/SchemasObject"
        }
      }
    },
    "SchemaParameters": {
      "type": "object",
      "properties": {
        "parameters": {
          "$ref": "#/definitions/JSONSchemaObject"
        }
      }
    },
    "SchemasObject": {
      "type": "object",
      "properties": {
        "service_binding": {
          "$ref": "#/definitions/ServiceBindingSchemaObject"
        },
        "service_instance": {
          "$ref": "#/definitions/ServiceInstanceSchemaObject"
        }
      }
    },
    "Service": {
      "type": "object",
      "required": [
        "name",
        "id",
        "description",
        "bindable",
        "plans"
      ],
      "properties": {
        "allow_context_updates": {
          "type": "boolean"
        },
        "bindable": {
          "type": "boolean"
        },
        "bindings_retrievable": {
          "type": "boolean"
        },
        "dashboard_client": {
          "$ref": "#/definitions/DashboardClient"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "instances_retrievable": {
          "type": "boolean"
        },
        "metadata": {
          "$ref": "#/definitions/Metadata"
        },
        "name": {
          "type": "string"
        },
        "plan_updateable": {
          "type": "boolean"
        },
        "plans": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Plan"
          }
        },
        "requires": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "syslog_drain",
              "route_forwarding",
              "volume_mount"
            ]
          }
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ServiceBinding": {
      "type": "object",
      "properties": {
        "credentials": {
          "$ref": "#/definitions/Object"
        },
        "route_service_url": {
          "type": "string"
        },
        "syslog_drain_url": {
          "type": "string"
        },
        "volume_mounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceBindingVolumeMount"
          }
        }
      }
    },
    "ServiceBindingRequest": {
      "type": "object",
      "required": [
        "service_id",
        "plan_id"
      ],
      "properties": {
        "app_guid": {
          "type": "string",
          "x-deprecated": true
        },
        "bind_resource": {
          "$ref": "#/definitions/ServiceBindingResourceObject"
        },
        "context": {
          "$ref": "#/definitions/Context"
        },
        "parameters": {
          "$ref": "#/definitions/Object"
        },
        "plan_id": {
          "type": "string"
        },
        "service_id": {
          "type": "string"
        }
      }
    },
    "ServiceBindingResource": {
      "type": "object",
      "properties": {
        "credentials": {
          "$ref": "#/definitions/Object"
        },
        "parameters": {
          "$ref": "#/definitions/Object"
        },
        "route_service_url": {
          "type": "string"
        },
        "syslog_drain_url": {
          "type": "string"
        },
        "volume_mounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceBindingVolumeMount"
          }
        }
      }
    },
    "ServiceBindingResourceObject": {
      "type": "object",
      "properties": {
        "app_guid": {
          "type": "string"
        },
        "route": {
          "type": "string"
        }
      }
    },
    "ServiceBindingSchemaObject": {
      "type": "object",
      "properties": {
        "create": {
          "$ref": "#/definitions/SchemaParameters"
        }
      }
    },
    "ServiceBindingVolumeMount": {
      "type": "object",
      "required": [
        "driver",
        "container_dir",
        "mode",
        "device_type",
        "device"
      ],
      "properties": {
        "container_dir": {
          "type": "string"
        },
        "device": {
          "$ref": "#/definitions/ServiceBindingVolumeMountDevice"
        },
        "device_type": {
          "type": "string",
          "enum": [
            "shared"
          ]
        },
        "driver": {
          "type": "string"
        },
        "mode": {
          "type": "string",
          "enum": [
            "r",
            "rw"
          ]
        }
      }
    },
    "ServiceBindingVolumeMountDevice": {
      "type": "object",
      "required": [
        "volume_id"
      ],
      "properties": {
        "mount_config": {
          "$ref": "#/definitions/Object"
        },
        "volume_id": {
          "type": "string"
        }
      }
    },
    "ServiceInstanceAsyncOperation": {
      "type": "object",
      "properties": {
        "dashboard_url": {
          "type": "string"
        },
        "operation": {
          "type": "string"
        }
      }
    },
    "ServiceInstancePreviousValues": {
      "type": "object",
      "properties": {
        "maintenance_info": {
          "$ref": "#/definitions/MaintenanceInfo"
        },
        "organization_id": {
          "type": "string",
          "x-deprecated": true
        },
        "plan_id": {
          "type": "string"
        },
        "service_id": {
          "type": "string",
          "x-deprecated": true
        },
        "space_id": {
          "type": "string",
          "x-deprecated": true
        }
      }
    },
    "ServiceInstanceProvision": {
      "type": "object",
      "properties": {
        "dashboard_url": {
          "type": "string"
        }
      }
    },
    "ServiceInstanceProvisionRequest": {
      "type": "object",
      "required": [
        "service_id",
        "plan_id",
        "organization_guid",
        "space_guid"
      ],
      "properties": {
        "context": {
          "$ref": "#/definitions/Context"
        },
        "maintenance_info": {
          "$ref": "#/definitions/MaintenanceInfo"
        },
        "organization_guid": {
          "type": "string",
          "x-deprecated": true
        },
        "parameters": {
          "$ref": "#/definitions/Object"
        },
        "plan_id": {
          "type": "string"
        },
        "service_id": {
          "type": "string"
        },
        "space_guid": {
          "type": "string",
          "x-deprecated": true
        }
      }
    },
    "ServiceInstanceResource": {
      "type": "object",
      "properties": {
        "dashboard_url": {
          "type": "string"
        },
        "parameters": {
          "$ref": "#/definitions/Object"
        },
        "plan_id": {
          "type": "string"
        },
        "service_id": {
          "type": "string"
        }
      }
    },
    "ServiceInstanceSchemaObject": {
      "type": "object",
      "properties": {
        "create": {
          "$ref": "#/definitions/SchemaParameters"
        },
        "update": {
          "$ref": "#/definitions/SchemaParameters"
        }
      }
    },
    "ServiceInstanceUpdateRequest": {
      "type": "object",
      "required": [
        "service_id"
      ],
      "properties": {
        "context": {
          "$ref": "#/definitions/Context"
        },
        "maintenance_info": {
          "$ref": "#/definitions/MaintenanceInfo"
        },
        "parameters": {
          "$ref": "#/definitions/Object"
        },
        "plan_id": {
          "type": "string"
        },
        "previous_values": {
          "$ref": "#/definitions/ServiceInstancePreviousValues"
        },
        "service_id": {
          "type": "string"
        }
      }
    }
  },
  "parameters": {
    "APIVersion": {
      "type": "string",
      "description": "version number of the Service Broker API that the Platform will use",
      "name": "X-Broker-API-Version",
      "in": "header",
      "required": true
    },
    "OriginatingIdentity": {
      "type": "string",
      "description": "identity of the user that initiated the request from the Platform",
      "name": "X-Broker-API-Originating-Identity",
      "in": "header"
    },
    "RequestIdentity": {
      "type": "string",
      "description": "idenity of the request from the Platform",
      "name": "X-Broker-API-Request-Identity",
      "in": "header"
    },
    "accepts_incomplete": {
      "type": "boolean",
      "description": "asynchronous operations supported",
      "name": "accepts_incomplete",
      "in": "query"
    },
    "binding_id": {
      "type": "string",
      "description": "binding id of binding to create",
      "name": "binding_id",
      "in": "path",
      "required": true
    },
    "instance_id": {
      "type": "string",
      "description": "instance id of instance to provision",
      "name": "instance_id",
      "in": "path",
      "required": true
    },
    "plan_id": {
      "type": "string",
      "description": "id of the plan associated with the instance being deleted",
      "name": "plan_id",
      "in": "query",
      "required": true
    },
    "service_id": {
      "type": "string",
      "description": "id of the service associated with the instance being deleted",
      "name": "service_id",
      "in": "query",
      "required": true
    }
  },
  "securityDefinitions": {
    "basicAuth": {
      "type": "basic"
    }
  },
  "security": [
    {
      "basicAuth": null
    }
  ],
  "externalDocs": {
    "description": "The offical Open Service Broker API specification",
    "url": "https://github.com/openservicebrokerapi/servicebroker/"
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "The Open Service Broker API defines an HTTP(S) interface between Platforms and Service Brokers.",
    "title": "Open Service Broker API",
    "contact": {
      "name": "Open Service Broker API",
      "url": "https://www.openservicebrokerapi.org/",
      "email": "open-service-broker-api@googlegroups.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "master - might contain changes that are not yet released"
  },
  "host": "localhost:3000",
  "paths": {
    "/v2/catalog": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Catalog"
        ],
        "summary": "get the catalog of services that the service broker offers",
        "operationId": "catalog.get",
        "responses": {
          "200": {
            "description": "catalog response",
            "schema": {
              "$ref": "#/definitions/Catalog"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "version number of the Service Broker API that the Platform will use",
          "name": "X-Broker-API-Version",
          "in": "header",
          "required": true
        },
        {
          "type": "string",
          "description": "identity of the user that initiated the request from the Platform",
          "name": "X-Broker-API-Originating-Identity",
          "in": "header"
        },
        {
          "type": "string",
          "description": "idenity of the request from the Platform",
          "name": "X-Broker-API-Request-Identity",
          "in": "header"
        }
      ]
    },
    "/v2/service_instances/{instance_id}": {
      "get": {
        "tags": [
          "ServiceInstances"
        ],
        "summary": "gets a service instance",
        "operationId": "serviceInstance.get",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ServiceInstanceResource"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "ServiceInstances"
        ],
        "summary": "provision a service instance",
        "operationId": "serviceInstance.provision",
        "parameters": [
          {
            "description": "parameters for the requested service instance provision",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServiceInstanceProvisionRequest"
            }
          },
          {
            "type": "boolean",
            "description": "asynchronous operations supported",
            "name": "accepts_incomplete",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ServiceInstanceProvision"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ServiceInstanceProvision"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/ServiceInstanceAsyncOperation"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "ServiceInstances"
        ],
        "summary": "deprovision a service instance",
        "operationId": "serviceInstance.deprovision",
        "parameters": [
          {
            "type": "boolean",
            "description": "asynchronous operations supported",
            "name": "accepts_incomplete",
            "in": "query"
          },
          {
            "type": "string",
            "description": "id of the service associated with the instance being deleted",
            "name": "service_id",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "id of the plan associated with the instance being deleted",
            "name": "plan_id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/AsyncOperation"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "ServiceInstances"
        ],
        "summary": "update a service instance",
        "operationId": "serviceInstance.update",
        "parameters": [
          {
            "description": "parameters for the requested service instance update",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServiceInstanceUpdateRequest"
            }
          },
          {
            "type": "boolean",
            "description": "asynchronous operations supported",
            "name": "accepts_incomplete",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/ServiceInstanceAsyncOperation"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "version number of the Service Broker API that the Platform will use",
          "name": "X-Broker-API-Version",
          "in": "header",
          "required": true
        },
        {
          "type": "string",
          "description": "identity of the user that initiated the request from the Platform",
          "name": "X-Broker-API-Originating-Identity",
          "in": "header"
        },
        {
          "type": "string",
          "description": "idenity of the request from the Platform",
          "name": "X-Broker-API-Request-Identity",
          "in": "header"
        },
        {
          "type": "string",
          "description": "instance id of instance to provision",
          "name": "instance_id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v2/service_instances/{instance_id}/last_operation": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "ServiceInstances"
        ],
        "summary": "last requested operation state for service instance",
        "operationId": "serviceInstance.lastOperation.get",
        "parameters": [
          {
            "type": "string",
            "description": "id of the service associated with the instance",
            "name": "service_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "id of the plan associated with the instance",
            "name": "plan_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "a provided identifier for the operation",
            "name": "operation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LastOperationResource"
            },
            "headers": {
              "RetryAfter": {
                "type": "string",
                "description": "Indicates when to retry the request"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "version number of the Service Broker API that the Platform will use",
          "name": "X-Broker-API-Version",
          "in": "header",
          "required": true
        },
        {
          "type": "string",
          "description": "identity of the user that initiated the request from the Platform",
          "name": "X-Broker-API-Originating-Identity",
          "in": "header"
        },
        {
          "type": "string",
          "description": "idenity of the request from the Platform",
          "name": "X-Broker-API-Request-Identity",
          "in": "header"
        },
        {
          "type": "string",
          "description": "instance id of instance to provision",
          "name": "instance_id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v2/service_instances/{instance_id}/service_bindings/{binding_id}": {
      "get": {
        "tags": [
          "ServiceBindings"
        ],
        "summary": "gets a service binding",
        "operationId": "serviceBinding.get",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ServiceBindingResource"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "ServiceBindings"
        ],
        "summary": "generation of a service binding",
        "operationId": "serviceBinding.binding",
        "parameters": [
          {
            "description": "parameters for the requested service binding",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServiceBindingRequest"
            }
          },
          {
            "type": "boolean",
            "description": "asynchronous operations supported",
            "name": "accepts_incomplete",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ServiceBinding"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ServiceBinding"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/AsyncOperation"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ServiceBindings"
        ],
        "summary": "deprovision of a service binding",
        "operationId": "serviceBinding.unbinding",
        "parameters": [
          {
            "type": "string",
            "description": "id of the service associated with the instance being deleted",
            "name": "service_id",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "id of the plan associated with the instance being deleted",
            "name": "plan_id",
            "in": "query",
            "required": true
          },
          {
            "type": "boolean",
            "description": "asynchronous operations supported",
            "name": "accepts_incomplete",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/AsyncOperation"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "version number of the Service Broker API that the Platform will use",
          "name": "X-Broker-API-Version",
          "in": "header",
          "required": true
        },
        {
          "type": "string",
          "description": "identity of the user that initiated the request from the Platform",
          "name": "X-Broker-API-Originating-Identity",
          "in": "header"
        },
        {
          "type": "string",
          "description": "idenity of the request from the Platform",
          "name": "X-Broker-API-Request-Identity",
          "in": "header"
        },
        {
          "type": "string",
          "description": "instance id of instance to provision",
          "name": "instance_id",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "binding id of binding to create",
          "name": "binding_id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v2/service_instances/{instance_id}/service_bindings/{binding_id}/last_operation": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "ServiceBindings"
        ],
        "summary": "last requested operation state for service binding",
        "operationId": "serviceBinding.lastOperation.get",
        "parameters": [
          {
            "type": "string",
            "description": "id of the service associated with the instance",
            "name": "service_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "id of the plan associated with the instance",
            "name": "plan_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "a provided identifier for the operation",
            "name": "operation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LastOperationResource"
            },
            "headers": {
              "RetryAfter": {
                "type": "string",
                "description": "Indicates when to retry the request"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "version number of the Service Broker API that the Platform will use",
          "name": "X-Broker-API-Version",
          "in": "header",
          "required": true
        },
        {
          "type": "string",
          "description": "identity of the user that initiated the request from the Platform",
          "name": "X-Broker-API-Originating-Identity",
          "in": "header"
        },
        {
          "type": "string",
          "description": "idenity of the request from the Platform",
          "name": "X-Broker-API-Request-Identity",
          "in": "header"
        },
        {
          "type": "string",
          "description": "instance id of instance to provision",
          "name": "instance_id",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "binding id of binding to create",
          "name": "binding_id",
          "in": "path",
          "required": true
        }
      ]
    }
  },
  "definitions": {
    "AsyncOperation": {
      "type": "object",
      "properties": {
        "operation": {
          "type": "string"
        }
      }
    },
    "Catalog": {
      "type": "object",
      "properties": {
        "services": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Service"
          }
        }
      }
    },
    "Context": {
      "description": "See [Context Conventions](https://github.com/openservicebrokerapi/servicebroker/blob/master/profile.md#context-object) for more details.",
      "type": "object"
    },
    "DashboardClient": {
      "type": "object",
      "required": [
        "id",
        "secret"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "redirect_uri": {
          "type": "string"
        },
        "secret": {
          "type": "string"
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "error": {
          "type": "string"
        }
      }
    },
    "JSONSchemaObject": {
      "type": "object"
    },
    "LastOperationResource": {
      "type": "object",
      "required": [
        "state"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "state": {
          "type": "string",
          "enum": [
            "in progress",
            "succeeded",
            "failed"
          ]
        }
      }
    },
    "MaintenanceInfo": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        }
      }
    },
    "Metadata": {
      "description": "See [Service Metadata Conventions](https://github.com/openservicebrokerapi/servicebroker/blob/master/profile.md#service-metadata) for more details.",
      "type": "object"
    },
    "Object": {
      "type": "object"
    },
    "Plan": {
      "type": "object",
      "required": [
        "id",
        "name",
        "description"
      ],
      "properties": {
        "bindable": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "free": {
          "type": "boolean",
          "default": true
        },
        "id": {
          "type": "string"
        },
        "maintenance_info": {
          "$ref": "#/definitions/MaintenanceInfo"
        },
        "maximum_polling_duration": {
          "type": "integer"
        },
        "metadata": {
          "$ref": "#/definitions/Metadata"
        },
        "name": {
          "type": "string"
        },
        "plan_updateable": {
          "type": "boolean"
        },
        "schemas": {
          "$ref": "#/definitions/SchemasObject"
        }
      }
    },
    "SchemaParameters": {
      "type": "object",
      "properties": {
        "parameters": {
          "$ref": "#/definitions/JSONSchemaObject"
        }
      }
    },
    "SchemasObject": {
      "type": "object",
      "properties": {
        "service_binding": {
          "$ref": "#/definitions/ServiceBindingSchemaObject"
        },
        "service_instance": {
          "$ref": "#/definitions/ServiceInstanceSchemaObject"
        }
      }
    },
    "Service": {
      "type": "object",
      "required": [
        "name",
        "id",
        "description",
        "bindable",
        "plans"
      ],
      "properties": {
        "allow_context_updates": {
          "type": "boolean"
        },
        "bindable": {
          "type": "boolean"
        },
        "bindings_retrievable": {
          "type": "boolean"
        },
        "dashboard_client": {
          "$ref": "#/definitions/DashboardClient"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "instances_retrievable": {
          "type": "boolean"
        },
        "metadata": {
          "$ref": "#/definitions/Metadata"
        },
        "name": {
          "type": "string"
        },
        "plan_updateable": {
          "type": "boolean"
        },
        "plans": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Plan"
          }
        },
        "requires": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "syslog_drain",
              "route_forwarding",
              "volume_mount"
            ]
          }
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ServiceBinding": {
      "type": "object",
      "properties": {
        "credentials": {
          "$ref": "#/definitions/Object"
        },
        "route_service_url": {
          "type": "string"
        },
        "syslog_drain_url": {
          "type": "string"
        },
        "volume_mounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceBindingVolumeMount"
          }
        }
      }
    },
    "ServiceBindingRequest": {
      "type": "object",
      "required": [
        "service_id",
        "plan_id"
      ],
      "properties": {
        "app_guid": {
          "type": "string",
          "x-deprecated": true
        },
        "bind_resource": {
          "$ref": "#/definitions/ServiceBindingResourceObject"
        },
        "context": {
          "$ref": "#/definitions/Context"
        },
        "parameters": {
          "$ref": "#/definitions/Object"
        },
        "plan_id": {
          "type": "string"
        },
        "service_id": {
          "type": "string"
        }
      }
    },
    "ServiceBindingResource": {
      "type": "object",
      "properties": {
        "credentials": {
          "$ref": "#/definitions/Object"
        },
        "parameters": {
          "$ref": "#/definitions/Object"
        },
        "route_service_url": {
          "type": "string"
        },
        "syslog_drain_url": {
          "type": "string"
        },
        "volume_mounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceBindingVolumeMount"
          }
        }
      }
    },
    "ServiceBindingResourceObject": {
      "type": "object",
      "properties": {
        "app_guid": {
          "type": "string"
        },
        "route": {
          "type": "string"
        }
      }
    },
    "ServiceBindingSchemaObject": {
      "type": "object",
      "properties": {
        "create": {
          "$ref": "#/definitions/SchemaParameters"
        }
      }
    },
    "ServiceBindingVolumeMount": {
      "type": "object",
      "required": [
        "driver",
        "container_dir",
        "mode",
        "device_type",
        "device"
      ],
      "properties": {
        "container_dir": {
          "type": "string"
        },
        "device": {
          "$ref": "#/definitions/ServiceBindingVolumeMountDevice"
        },
        "device_type": {
          "type": "string",
          "enum": [
            "shared"
          ]
        },
        "driver": {
          "type": "string"
        },
        "mode": {
          "type": "string",
          "enum": [
            "r",
            "rw"
          ]
        }
      }
    },
    "ServiceBindingVolumeMountDevice": {
      "type": "object",
      "required": [
        "volume_id"
      ],
      "properties": {
        "mount_config": {
          "$ref": "#/definitions/Object"
        },
        "volume_id": {
          "type": "string"
        }
      }
    },
    "ServiceInstanceAsyncOperation": {
      "type": "object",
      "properties": {
        "dashboard_url": {
          "type": "string"
        },
        "operation": {
          "type": "string"
        }
      }
    },
    "ServiceInstancePreviousValues": {
      "type": "object",
      "properties": {
        "maintenance_info": {
          "$ref": "#/definitions/MaintenanceInfo"
        },
        "organization_id": {
          "type": "string",
          "x-deprecated": true
        },
        "plan_id": {
          "type": "string"
        },
        "service_id": {
          "type": "string",
          "x-deprecated": true
        },
        "space_id": {
          "type": "string",
          "x-deprecated": true
        }
      }
    },
    "ServiceInstanceProvision": {
      "type": "object",
      "properties": {
        "dashboard_url": {
          "type": "string"
        }
      }
    },
    "ServiceInstanceProvisionRequest": {
      "type": "object",
      "required": [
        "service_id",
        "plan_id",
        "organization_guid",
        "space_guid"
      ],
      "properties": {
        "context": {
          "$ref": "#/definitions/Context"
        },
        "maintenance_info": {
          "$ref": "#/definitions/MaintenanceInfo"
        },
        "organization_guid": {
          "type": "string",
          "x-deprecated": true
        },
        "parameters": {
          "$ref": "#/definitions/Object"
        },
        "plan_id": {
          "type": "string"
        },
        "service_id": {
          "type": "string"
        },
        "space_guid": {
          "type": "string",
          "x-deprecated": true
        }
      }
    },
    "ServiceInstanceResource": {
      "type": "object",
      "properties": {
        "dashboard_url": {
          "type": "string"
        },
        "parameters": {
          "$ref": "#/definitions/Object"
        },
        "plan_id": {
          "type": "string"
        },
        "service_id": {
          "type": "string"
        }
      }
    },
    "ServiceInstanceSchemaObject": {
      "type": "object",
      "properties": {
        "create": {
          "$ref": "#/definitions/SchemaParameters"
        },
        "update": {
          "$ref": "#/definitions/SchemaParameters"
        }
      }
    },
    "ServiceInstanceUpdateRequest": {
      "type": "object",
      "required": [
        "service_id"
      ],
      "properties": {
        "context": {
          "$ref": "#/definitions/Context"
        },
        "maintenance_info": {
          "$ref": "#/definitions/MaintenanceInfo"
        },
        "parameters": {
          "$ref": "#/definitions/Object"
        },
        "plan_id": {
          "type": "string"
        },
        "previous_values": {
          "$ref": "#/definitions/ServiceInstancePreviousValues"
        },
        "service_id": {
          "type": "string"
        }
      }
    }
  },
  "parameters": {
    "APIVersion": {
      "type": "string",
      "description": "version number of the Service Broker API that the Platform will use",
      "name": "X-Broker-API-Version",
      "in": "header",
      "required": true
    },
    "OriginatingIdentity": {
      "type": "string",
      "description": "identity of the user that initiated the request from the Platform",
      "name": "X-Broker-API-Originating-Identity",
      "in": "header"
    },
    "RequestIdentity": {
      "type": "string",
      "description": "idenity of the request from the Platform",
      "name": "X-Broker-API-Request-Identity",
      "in": "header"
    },
    "accepts_incomplete": {
      "type": "boolean",
      "description": "asynchronous operations supported",
      "name": "accepts_incomplete",
      "in": "query"
    },
    "binding_id": {
      "type": "string",
      "description": "binding id of binding to create",
      "name": "binding_id",
      "in": "path",
      "required": true
    },
    "instance_id": {
      "type": "string",
      "description": "instance id of instance to provision",
      "name": "instance_id",
      "in": "path",
      "required": true
    },
    "plan_id": {
      "type": "string",
      "description": "id of the plan associated with the instance being deleted",
      "name": "plan_id",
      "in": "query",
      "required": true
    },
    "service_id": {
      "type": "string",
      "description": "id of the service associated with the instance being deleted",
      "name": "service_id",
      "in": "query",
      "required": true
    }
  },
  "securityDefinitions": {
    "basicAuth": {
      "type": "basic"
    }
  },
  "security": [
    {
      "basicAuth": []
    }
  ],
  "externalDocs": {
    "description": "The offical Open Service Broker API specification",
    "url": "https://github.com/openservicebrokerapi/servicebroker/"
  }
}`))
}
