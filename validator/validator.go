package validator

import (
	"github.com/openservicebrokerapi/osb-checker/autogenerated/client/catalog"
	bindings "github.com/openservicebrokerapi/osb-checker/autogenerated/client/service_bindings"
	instances "github.com/openservicebrokerapi/osb-checker/autogenerated/client/service_instances"
	"github.com/openservicebrokerapi/osb-checker/constants"
	"github.com/openservicebrokerapi/osb-checker/validator/abstract"
	"github.com/openservicebrokerapi/osb-checker/validator/common"
)

type AbstractValidator interface {
	GetCatalog(params *catalog.CatalogGetParams) error

	Provision(params *instances.ServiceInstanceProvisionParams) error

	PollInstanceLastOperation(params *instances.ServiceInstanceLastOperationGetParams) error

	GetInstance(params *instances.ServiceInstanceGetParams) error

	UpdateInstance(params *instances.ServiceInstanceUpdateParams) error

	Deprovision(params *instances.ServiceInstanceDeprovisionParams) error

	Bind(params *bindings.ServiceBindingBindingParams) error

	PollBindingLastOperation(params *bindings.ServiceBindingLastOperationGetParams) error

	GetBinding(params *bindings.ServiceBindingGetParams) error

	Unbind(params *bindings.ServiceBindingUnbindingParams) error
}

type Validator struct {
	*common.BaseValidator
	AbstractValidator

	Version string
}

func NewValidator(version, edp string) *Validator {
	var val AbstractValidator

	switch version {
	case constants.Version214:
		val = abstract.NewValidatorV214(edp)
		break
	default:
		val = abstract.NewValidatorV214(edp)
		break
	}

	return &Validator{
		BaseValidator:     common.NewBaseValidator(version, edp),
		AbstractValidator: val,
	}
}
