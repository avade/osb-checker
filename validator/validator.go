package validator

import (
	"fmt"

	"github.com/openservicebrokerapi/osb-checker/autogenerated/client/catalog"
	bindings "github.com/openservicebrokerapi/osb-checker/autogenerated/client/service_bindings"
	instances "github.com/openservicebrokerapi/osb-checker/autogenerated/client/service_instances"
	"github.com/openservicebrokerapi/osb-checker/constants"
)

type Validator interface {
	Setup(edp string) error

	GetCatalog(params *catalog.CatalogGetParams) error

	Provision(params *instances.ServiceInstanceProvisionParams) error

	PollInstanceLastOperation(params *instances.ServiceInstanceLastOperationGetParams) error

	GetInstance(params *instances.ServiceInstanceGetParams) error

	UpdateInstance(params *instances.ServiceInstanceUpdateParams) error

	Deprovision(params *instances.ServiceInstanceDeprovisionParams) error

	Bind(params *bindings.ServiceBindingBindingParams) error

	PollBindingLastOperation(params *bindings.ServiceBindingLastOperationGetParams) error

	GetBinding(params *bindings.ServiceBindingGetParams) error

	Unbind(params *bindings.ServiceBindingUnbindingParams) error
}

var vals = map[string]Validator{}

// NewValidator implementation
func NewValidator(version, url string) Validator {
	var val Validator
	var exist bool

	val, exist = vals[version]
	if !exist {
		fmt.Printf("%s is not registered to validator list, use default one",
			version)
		val = vals[constants.Version214]
	}

	val.Setup(url)
	return val
}

// RegisterValidator implementation
func RegisterValidator(version string, val Validator) error {
	if _, exist := vals[version]; exist {
		return fmt.Errorf("Validator %s already exists", version)
	}

	vals[version] = val
	return nil
}

// UnregisterValidator implementation
func UnregisterValidator(version string) {
	if _, exist := vals[version]; !exist {
		return
	}

	delete(vals, version)
	return
}
