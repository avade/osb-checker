package common

import (
	"encoding/json"
	"io/ioutil"

	"github.com/go-openapi/runtime/client"

	apiclient "github.com/openservicebrokerapi/osb-checker/autogenerated/client"
	"github.com/openservicebrokerapi/osb-checker/autogenerated/client/catalog"
	. "github.com/openservicebrokerapi/osb-checker/config"
	"github.com/openservicebrokerapi/osb-checker/constants"

	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

func NewValidator() *Validator {
	return &Validator{
		OpenServiceBroker: apiclient.Default,
	}
}

type Validator struct {
	*apiclient.OpenServiceBroker
}

func (v *Validator) ValidateAPIVersionHeader(url string) error {
	return nil
}

func (v *Validator) ValidateAuthentication() error {
	return nil
}

func (v *Validator) ValidateAsyncParameters() error {
	return nil
}

func (v *Validator) ValidateJSONSchema(data interface{}, schemaFile string) error {
	schemaBody, err := ioutil.ReadFile(schemaFile)
	if err != nil {
		return err
	}
	schema := new(spec.Schema)
	json.Unmarshal(schemaBody, schema)

	return validate.AgainstSchema(schema, data, strfmt.Default)
}

func (v *Validator) ValidateCatalogSchema() error {
	var params = catalog.NewCatalogGetParams()
	params.SetTimeout(constants.HTTPRequestTimeout)
	params.SetXBrokerAPIVersion(CONF.APIVersion)
	authInfo := client.BasicAuth(CONF.Authentication.Username, CONF.Authentication.Password)

	_, err := v.Catalog.CatalogGet(params, authInfo)
	if err != nil {
		return err
	}
	return nil
}
