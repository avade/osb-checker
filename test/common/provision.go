package common

import (
	"testing"

	v2 "github.com/openservicebrokerapi/osb-checker/autogenerated/models"
	osbclient "github.com/openservicebrokerapi/osb-checker/client"
	"github.com/openservicebrokerapi/osb-checker/config"
	. "github.com/smartystreets/goconvey/convey"
)

func TestProvision(
	t *testing.T,
	instanceID string,
	req *v2.ServiceInstanceProvisionRequest,
	async, looseCheck bool,
) {
	Convey("PROVISIONING - request syntax", t, func() {

		So(testAPIVersionHeader(config.GenerateInstanceURL(instanceID), "PUT"), ShouldBeNil)
		So(testAuthentication(config.GenerateInstanceURL(instanceID), "PUT"), ShouldBeNil)
		if async {
			So(testAsyncParameters(config.GenerateInstanceURL(instanceID), "PUT"), ShouldBeNil)
		}

		var emptyValue, fakeValue = "", "xxxx-xxxx"
		Convey("should reject if missing service_id", func() {
			tempBody := new(v2.ServiceInstanceProvisionRequest)
			deepCopy(req, tempBody)
			tempBody.ServiceID = &emptyValue
			code, _, _, err := osbclient.Default.Provision(instanceID, tempBody, async)

			So(err, ShouldBeNil)
			So(code, ShouldEqual, 400)
		})

		Convey("should reject if missing plan_id", func() {
			tempBody := new(v2.ServiceInstanceProvisionRequest)
			deepCopy(req, tempBody)
			tempBody.PlanID = &emptyValue
			code, _, _, err := osbclient.Default.Provision(instanceID, tempBody, async)

			So(err, ShouldBeNil)
			So(code, ShouldEqual, 400)
		})

		if !looseCheck {
			Convey("should reject if request payload is missing organization_guid", func() {
				tempBody := new(v2.ServiceInstanceProvisionRequest)
				deepCopy(req, tempBody)
				tempBody.OrganizationGUID = &emptyValue
				code, _, _, err := osbclient.Default.Provision(instanceID, tempBody, async)

				So(err, ShouldBeNil)
				So(code, ShouldEqual, 400)
			})

			Convey("should reject if request payload is missing space_guid", func() {
				tempBody := new(v2.ServiceInstanceProvisionRequest)
				deepCopy(req, tempBody)
				tempBody.SpaceGUID = &emptyValue
				code, _, _, err := osbclient.Default.Provision(instanceID, tempBody, async)

				So(err, ShouldBeNil)
				So(code, ShouldEqual, 400)
			})
		}

		Convey("should reject if service_id is invalid", func() {
			tempBody := new(v2.ServiceInstanceProvisionRequest)
			deepCopy(req, tempBody)
			tempBody.ServiceID = &fakeValue
			code, _, _, err := osbclient.Default.Provision(instanceID, tempBody, async)

			So(err, ShouldBeNil)
			So(code, ShouldEqual, 400)
		})

		Convey("should reject if plan_id is invalid", func() {
			tempBody := new(v2.ServiceInstanceProvisionRequest)
			deepCopy(req, tempBody)
			tempBody.PlanID = &fakeValue
			code, _, _, err := osbclient.Default.Provision(instanceID, tempBody, async)

			So(err, ShouldBeNil)
			So(code, ShouldEqual, 400)
		})

		Convey("should reject if parameters are not following schema", func() {
			tempBody := new(v2.ServiceInstanceProvisionRequest)
			deepCopy(req, tempBody)
			tempBody.Parameters = map[string]interface{}{
				"can-not": "be-good",
			}
			if err := testCatalogSchema(&SchemaOpts{
				ServiceID:  *tempBody.ServiceID,
				PlanID:     *tempBody.PlanID,
				Parameters: tempBody.Parameters,
				SchemaType: config.TypeServiceInstance,
				Action:     config.ActionCreate,
			}); err == nil {
				return
			}
			code, _, _, err := osbclient.Default.Provision(instanceID, tempBody, async)

			So(err, ShouldBeNil)
			So(code, ShouldEqual, 400)
		})
	})

	Convey("PROVISIONING - new", t, func() {
		Convey("should accept a valid provision request", func() {
			tempBody := new(v2.ServiceInstanceProvisionRequest)
			deepCopy(req, tempBody)
			code, syncBody, asyncBody, err := osbclient.Default.Provision(instanceID, tempBody, async)

			So(err, ShouldBeNil)
			if async {
				So(code, ShouldEqual, 202)
				So(testJSONSchema(asyncBody), ShouldBeNil)
			} else {
				So(code, ShouldEqual, 201)
				So(testJSONSchema(syncBody), ShouldBeNil)
			}
		})
	})

	if async {
		Convey("PROVISIONING - poll", t, func(c C) {
			testPollInstanceLastOperation(instanceID)

			So(pollInstanceLastOperationStatus(instanceID), ShouldBeNil)
		})
	}

	Convey("PROVISIONING - existed", t, func() {
		Convey("should return 200 OK when instance Id exists with identical properties", func() {
			tempBody := new(v2.ServiceInstanceProvisionRequest)
			deepCopy(req, tempBody)
			code, syncBody, _, err := osbclient.Default.Provision(instanceID, tempBody, async)

			So(err, ShouldBeNil)
			So(code, ShouldEqual, 200)
			So(testJSONSchema(syncBody), ShouldBeNil)
		})
	})
}
