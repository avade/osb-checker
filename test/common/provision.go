package common

import (
	"testing"

	v2 "github.com/openservicebrokerapi/osb-checker/autogenerated/models"
	apiclient "github.com/openservicebrokerapi/osb-checker/client"
	. "github.com/openservicebrokerapi/osb-checker/config"
	. "github.com/smartystreets/goconvey/convey"
)

func TestProvision(
	t *testing.T,
	instanceID string,
	req *v2.ServiceInstanceProvisionRequest,
	async bool,
) {
	t.Parallel()

	Convey("PROVISION - request syntax", t, func() {

		So(testAPIVersionHeader(GenerateInstanceURL(instanceID), "PUT"), ShouldEqual, nil)
		So(testAuthentication(GenerateInstanceURL(instanceID), "PUT"), ShouldEqual, nil)
		So(testAsyncParameters(GenerateInstanceURL(instanceID), "PUT"), ShouldEqual, nil)

		var tempBody = new(v2.ServiceInstanceProvisionRequest)
		Convey("should reject if missing service_id", func() {
			deepCopy(req, tempBody)
			*tempBody.ServiceID = ""
			code, _, err := apiclient.Default.Provision(instanceID, tempBody, async)

			So(err, ShouldEqual, nil)
			So(code, ShouldEqual, 400)
		})

		Convey("should reject if missing plan_id", func() {
			deepCopy(req, tempBody)
			*tempBody.PlanID = ""
			code, _, err := apiclient.Default.Provision(instanceID, tempBody, async)

			So(err, ShouldEqual, nil)
			So(code, ShouldEqual, 400)
		})

		Convey("should reject if request payload is missing organization_guid", func() {
			deepCopy(req, tempBody)
			*tempBody.OrganizationGUID = ""
			code, _, err := apiclient.Default.Provision(instanceID, tempBody, async)

			So(err, ShouldEqual, nil)
			So(code, ShouldEqual, 400)
		})

		Convey("should reject if request payload is missing space_guid", func() {
			deepCopy(req, tempBody)
			*tempBody.SpaceGUID = ""
			code, _, err := apiclient.Default.Provision(instanceID, tempBody, async)

			So(err, ShouldEqual, nil)
			So(code, ShouldEqual, 400)
		})

		Convey("should reject if service_id is invalid", func() {
			deepCopy(req, tempBody)
			*tempBody.ServiceID = "xxxx-xxxx"
			code, _, err := apiclient.Default.Provision(instanceID, tempBody, async)

			So(err, ShouldEqual, nil)
			So(code, ShouldEqual, 400)
		})

		Convey("should reject if paln_id is invalid", func() {
			deepCopy(req, tempBody)
			*tempBody.PlanID = "xxxx-xxxx"
			code, _, err := apiclient.Default.Provision(instanceID, tempBody, async)

			So(err, ShouldEqual, nil)
			So(code, ShouldEqual, 400)
		})

		Convey("should accept a valid provision request", func() {
			deepCopy(req, tempBody)
			code, body, err := apiclient.Default.Provision(instanceID, tempBody, async)

			So(err, ShouldEqual, nil)
			if async {
				So(code, ShouldEqual, 202)
			} else {
				So(code, ShouldEqual, 201)
			}
			So(testJSONSchema(body), ShouldEqual, nil)
		})

		Convey("should return 200 OK when instance Id exists with identical properties", func() {
			deepCopy(req, tempBody)
			code, body, err := apiclient.Default.Provision(instanceID, tempBody, async)

			So(err, ShouldEqual, nil)
			So(code, ShouldEqual, 200)
			So(testJSONSchema(body), ShouldEqual, nil)
		})
	})
}
