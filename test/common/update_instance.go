package common

import (
	"testing"

	v2 "github.com/openservicebrokerapi/osb-checker/autogenerated/models"
	apiclient "github.com/openservicebrokerapi/osb-checker/client"
	"github.com/openservicebrokerapi/osb-checker/config"
	. "github.com/smartystreets/goconvey/convey"
)

func TestUpdateInstance(
	t *testing.T,
	instanceID string,
	req *v2.ServiceInstanceUpdateRequest,
	async bool,
) {
	Convey("UPDATE - request syntax", t, func() {

		So(testAPIVersionHeader(config.GenerateInstanceURL(instanceID), "PATCH"), ShouldEqual, nil)
		So(testAuthentication(config.GenerateInstanceURL(instanceID), "PATCH"), ShouldEqual, nil)
		if async {
			So(testAsyncParameters(config.GenerateInstanceURL(instanceID), "PATCH"), ShouldEqual, nil)
		}

		var emptyValue, fakeValue = "", "xxxx-xxxx"
		Convey("should reject if missing service_id", func() {
			tempBody := new(v2.ServiceInstanceUpdateRequest)
			deepCopy(req, tempBody)
			tempBody.ServiceID = &emptyValue
			code, _, err := apiclient.Default.UpdateInstance(instanceID, tempBody)

			So(err, ShouldEqual, nil)
			So(code, ShouldEqual, 400)
		})

		Convey("should reject if service_id is invalid", func() {
			tempBody := new(v2.ServiceInstanceUpdateRequest)
			deepCopy(req, tempBody)
			tempBody.ServiceID = &fakeValue
			code, _, err := apiclient.Default.UpdateInstance(instanceID, tempBody)

			So(err, ShouldEqual, nil)
			So(code, ShouldEqual, 400)
		})

		Convey("should accept a valid update request", func() {
			tempBody := new(v2.ServiceInstanceUpdateRequest)
			deepCopy(req, tempBody)
			code, asyncBody, err := apiclient.Default.UpdateInstance(instanceID, tempBody)

			So(err, ShouldEqual, nil)
			if async {
				So(code, ShouldEqual, 202)
				So(testJSONSchema(asyncBody), ShouldEqual, nil)
			} else {
				So(code, ShouldEqual, 200)
			}
		})
	})
}
