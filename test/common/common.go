package common

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strconv"

	v2 "github.com/openservicebrokerapi/osb-checker/autogenerated/models"
	apiclient "github.com/openservicebrokerapi/osb-checker/client"
	. "github.com/openservicebrokerapi/osb-checker/config"

	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

func testAPIVersionHeader(url, method string) error {
	params := &apiclient.BrokerRequestParams{
		URL:          url,
		Method:       method,
		HeaderOption: map[string]string{},
		QueryParam: map[string]string{
			"accepts_incomplete": strconv.FormatBool(true),
		},
		Username: CONF.Authentication.Username,
		Password: CONF.Authentication.Password,
	}

	res, err := apiclient.Default.Recv(params)
	if err != nil {
		return err
	}
	if !reflect.DeepEqual(res.Code, 412) {
		return fmt.Errorf("Expected %d, got %d", 412, res.Code)
	}

	return nil
}

func testAuthentication(url, method string) error {
	params := &apiclient.BrokerRequestParams{
		URL:    url,
		Method: method,
		HeaderOption: map[string]string{
			"X-Broker-API-Version": CONF.APIVersion,
		},
		QueryParam: map[string]string{
			"accepts_incomplete": strconv.FormatBool(true),
		},
	}

	res, err := apiclient.Default.Recv(params)
	if err != nil {
		return err
	}
	if !reflect.DeepEqual(res.Code, 401) {
		return fmt.Errorf("Expected %d, got %d", 401, res.Code)
	}

	return nil
}

func testAsyncParameters(url, method string) error {
	params := &apiclient.BrokerRequestParams{
		URL:    url,
		Method: method,
		HeaderOption: map[string]string{
			"X-Broker-API-Version": CONF.APIVersion,
		},
		QueryParam: map[string]string{},
		Username:   CONF.Authentication.Username,
		Password:   CONF.Authentication.Password,
	}

	res, err := apiclient.Default.Recv(params)
	if err != nil {
		return err
	}
	if !reflect.DeepEqual(res.Code, 422) {
		return fmt.Errorf("Expected %d, got %d", 422, res.Code)
	}

	return nil
}

type Schema interface {
	Validate(formats strfmt.Registry) error

	MarshalBinary() ([]byte, error)

	UnmarshalBinary(b []byte) error
}

func testJSONSchema(schema Schema) error {
	return schema.Validate(strfmt.Default)
}

// TODO: For provision, update and bind operation, testCatalogSchema should be
// called to assert the legality of parameters schema.
type SchemaOpts struct {
	ServiceID, PlanID  string
	Parameters         interface{}
	SchemaType, Action string
}

func testCatalogSchema(opt *SchemaOpts) error {
	_, catalog, err := apiclient.Default.GetCatalog()
	if err != nil {
		return err
	}
	if err = testJSONSchema(catalog); err != nil {
		return err
	}

	return parametersSchemaCheck(catalog, opt)
}

func parametersSchemaCheck(catalog *v2.Catalog, opt *SchemaOpts) error {
	svc := func(catalog *v2.Catalog) *v2.Service {
		for _, svc := range catalog.Services {
			if *svc.ID == opt.ServiceID {
				return svc
			}
		}
		return nil
	}(catalog)
	plan := func(svc *v2.Service) *v2.Plan {
		for _, plan := range svc.Plans {
			if *plan.ID == opt.PlanID {
				return plan
			}
		}
		return nil
	}(svc)

	// If plan.Schemas is empty, then consider it would success no matter what opt.Parameter is.
	if plan.Schemas == nil {
		return nil
	}
	var params interface{}
	switch opt.SchemaType {
	case TypeServiceInstance:
		// If plan.Schemas.ServiceInstance is empty, then consider it would success no matter
		// what opt.Parameter is.
		instance := plan.Schemas.ServiceInstance
		if instance == nil {
			return nil
		}
		if opt.Action == ActionCreate {
			// If instance.Create is empty, then consider it would success no matter
			// what opt.Parameter is.
			create := instance.Create
			if create == nil {
				return nil
			}
			params = create.Parameters
		} else {
			// If instance.Update is empty, then consider it would success no matter
			// what opt.Parameter is.
			update := instance.Update
			if update == nil {
				return nil
			}
			params = update.Parameters
		}
		break
	case TypeServiceBinding:
		// If plan.Schemas.ServiceBinding is empty, then consider it would success no matter
		// what opt.Parameter is.
		binding := plan.Schemas.ServiceBinding
		if binding == nil {
			return nil
		}
		// If binding.Create is empty, then consider it would success no matter what
		// opt.Parameter is.
		create := binding.Create
		if create == nil {
			return nil
		}
		params = create.Parameters
	}

	schema := new(spec.Schema)
	schemaJSON, _ := json.Marshal(params)
	json.Unmarshal(schemaJSON, schema)
	return validate.AgainstSchema(schema, opt.Parameters, strfmt.Default)
}

func deepCopy(src Schema, dst Schema) error {
	srcByte, err := src.MarshalBinary()
	if err != nil {
		return err
	}

	return dst.UnmarshalBinary(srcByte)
}
